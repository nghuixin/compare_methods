position = position_dodge(width = 0.5)) +
geom_text(aes(label = significance, y = ifelse(estimate >= 0, upper.CL + 0.1, lower.CL + 0.1)),
vjust = 0, size = 5.0, hjust = 0) +
labs(x = "Pairwise Comparisons", y = "Brain-PAD (years)") +
ylim(-8, 8) + theme_minimal() +
theme(axis.title.x = element_text(size = 20), axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 12, angle = 0, hjust = 0, vjust = 0.5, color = "black"),  # Left-align x-axis ticks
axis.text.y = element_text(size = 18, color = "black")) +
scale_x_discrete(labels = rev(custom_order)) + coord_flip() # Set the custom order for x-axis ticks
#dev.off()
emms.li.ref <- emmeans(m1, trt.vs.ctrl ~ moodStabilizer, ref = 6)
emms.li.ref$contrasts %>% kable(digits = 3)
# table (any lithium?)
BD_only$moodStabCollapseAntiE<- fct_collapse(BD_only$moodStabilizer ,AED = c( "AED + SGA"  , "Li + AED", "AED"))
#BD_only %>% group_by(moodStabCollapse) %>% tally() %>% kable() # how many data points in each group?
m.collapse.aed<-lmer(BrainPAD ~   Age + Sex   +moodStabCollapseAntiE + (1 | Site), data = BD_only)
summary(m.collapse.aed)
emm.s.aed<-emmeans(m.collapse.aed, trt.vs.ctrl ~   moodStabCollapseAntiE)
# calculate -lvalues and CI for pairwise comparisons
# adjust the p-values for multiple comparisons
pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
# Get the counts for each medication group
counts <- BD_only %>%
filter(!is.na(moodStabCollapseAntiE)) %>%
group_by(moodStabCollapseAntiE) %>%
summarize(count = n())
#jpeg(file="figures/emmeans_medication_collapse.jpeg")
plot(emm.s.aed,ylab="Medication",xlab="Brain-PAD", comparisons = TRUE, horizontal=F)+ theme_classic()  + theme(
axis.title.x = element_text(size = 20),
plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_text(size = 20),
axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18))    + scale_y_discrete(labels = function(x) paste(x, "\nn=", counts$count[match(x, levels(factor(counts$moodStabCollapseAntiE)))], sep = ""))  +
scale_x_continuous("Brain-PAD (years)")+ coord_flip()  + ylab("Medication")
# dev.off()
# table (any lithium?)
BD_only$moodStabCollapse <- fct_collapse(BD_only$moodStabilizer ,Li = c( "Li + SGA"  , "Li + AED", "Li"))
#BD_only %>% group_by(moodStabCollapse) %>% tally() %>% kable() # how many data points in each group?
m.collapse.li<-lmer(BrainPAD ~   Age + Sex   +moodStabCollapse + (1 | Site), data = BD_only)
summary(m.collapse.li)
# Get the counts for each medication group
counts <- BD_only %>%
filter(!is.na(moodStabCollapse)) %>%
group_by(moodStabCollapse) %>%
summarize(count = n())
m.collapse.li<- emmeans(m.collapse.li, trt.vs.ctrl ~ moodStabCollapse )
#jpeg(file="figures/emmeans_medication_collapse.jpeg")
plot(m.collapse.li,ylab="Medication",xlab="Brain-PAD", comparisons = TRUE, horizontal=F)+ theme_classic()  + theme(
axis.title.x = element_text(size = 20),
plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_text(size = 20),
axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18))    + scale_y_discrete(labels = function(x) paste(x, "\nn=", counts$count[match(x, levels(factor(counts$moodStabCollapse)))], sep = ""))  +
scale_x_continuous("Brain-PAD (years)")+ coord_flip()  + ylab("Medication")
# dev.off()
# m.collapse.li.ref$contrasts  %>% kable(digits = 3)
# m.collapse.li.ref$contrasts
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
# Reorder the contrast column
pairwise_df$contrast <- gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df <- pairwise_df %>% mutate(lower.CL = lower.CL*-1,
upper.CL = upper.CL*-1,
estimate = estimate*-1,
contrast_with_significance = paste(contrast, significance))
pairwise_df$contrast
# Define the vector with your strings
custom_order <- c(
"AED - None",
"SGA - None",
"(AED + SGA) - None",
"(AED + SGA) - AED",
"SGA - AED",
"Li - None",
"(AED + Li) - None",
"(SGA + Li) - None",
"(AED + SGA + Li) - None",
"Li - AED",
"(AED + Li) - AED",
"(SGA + Li) - AED",
"(AED + SGA + Li) - AED",
"(AED + Li) - (AED + SGA)",
"(SGA + Li) - (AED + SGA)",
"(SGA + Li) - (AED + Li)",
"(AED + SGA + Li) - (AED + SGA)",
"(AED + SGA + Li) - (AED + Li)",
"(AED + SGA + Li) - (SGA + Li)",
"SGA - Li",
"SGA - (AED + SGA)",
"(SGA + Li) - SGA",
"SGA - (AED + Li)",
"(AED + SGA + Li) - SGA",
"Li - (AED + SGA)",
"Li - (AED + Li)",
"(SGA + Li) - Li",
"(AED + SGA + Li) - Li"
)
pairwise_df$contrast <- factor(pairwise_df$contrast, levels = custom_order)
pairwise_df
# Create box plots for each contrast with asterisks in x-axis labels
ggplot(pairwise_df, aes(x = contrast, y = estimate)) +
#geom_boxplot() +
geom_bar(stat = "identity", position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2, position = position_dodge(width = 0.75)) +
labs(x = "Contrast", y = "Estimate") +
ylim(-8, 8) +  # Set the y-axis limits as needed
theme_minimal() +
theme(axis.title.x = element_text(size = 12), axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10, angle = 90, hjust = 1, vjust = 0.5),
axis.text.y = element_text(size = 10),
legend.title = element_blank()) + coord_flip()
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
# Reorder the contrast column
pairwise_df$contrast <- gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
# Reorder the contrast column
pairwise_df$contrast <- gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
# Reorder the contrast column
pairwise_df$contrast <- gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df
gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
# Calculate Bonferroni-adjusted pairwise comparisons
all_pairs <- pairs(emm.s, infer = c(TRUE, TRUE), adjust = "bonferroni")
pairwise_df <- as.tibble(all_pairs)
pairwise_df <- pairwise_df %>%
mutate(significance = case_when(
p.value < 0.001 ~ '***',
p.value < 0.01 ~ '**',
p.value < 0.05 ~ '*',
TRUE ~ ''  # Optional: If none of the conditions are met, leave it empty
))
pairwise_df
pairwise_df <- pairwise_df %>% mutate(lower.CL = lower.CL*-1,
upper.CL = upper.CL*-1,
estimate = estimate*-1,
contrast_with_significance = paste(contrast, significance))
# Reorder the contrast column
pairwise_df$contrast <- gsub("(.+) - (.+)", "\\2 - \\1", pairwise_df$contrast)
# Define the vector with your strings
custom_order <- c(
"AED - None",
"SGA - None",
"(AED + SGA) - None",
"(AED + SGA) - AED",
"SGA - AED",
"Li - None",
"(AED + Li) - None",
"(SGA + Li) - None",
"(AED + SGA + Li) - None",
"Li - AED",
"(AED + Li) - AED",
"(SGA + Li) - AED",
"(AED + SGA + Li) - AED",
"(AED + Li) - (AED + SGA)",
"(SGA + Li) - (AED + SGA)",
"(SGA + Li) - (AED + Li)",
"(AED + SGA + Li) - (AED + SGA)",
"(AED + SGA + Li) - (AED + Li)",
"(AED + SGA + Li) - (SGA + Li)",
"SGA - Li",
"SGA - (AED + SGA)",
"(SGA + Li) - SGA",
"SGA - (AED + Li)",
"(AED + SGA + Li) - SGA",
"Li - (AED + SGA)",
"Li - (AED + Li)",
"(SGA + Li) - Li",
"(AED + SGA + Li) - Li"
)
pairwise_df$contrast <- factor(pairwise_df$contrast, levels = custom_order)
pairwise_df
all_pairs
emm.s
pairs(emm.s, contrast = list( "AED"), adjust = "bonferroni")
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded
# [1] FALSE FALSE
pacman::p_load(pckgs, character.only = TRUE)
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded
# [1] FALSE FALSE
pacman::p_load(pckgs, character.only = TRUE)
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded
# [1] FALSE FALSE
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()
# function to test whether data is normally distributed
test_normality <- function(data) {
normality_test <- data %>%
summarise(across(everything(), ~ shapiro.test(.)$p.value))
return(normality_test)
}
# z transform data
z_transform <- function(data) {
# Calculate column-wise means and standard deviations
means <- colMeans(data)
std_devs <- apply(data, 2, sd)
# Z-transform each column
z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
return(z_transformed_data)
}
# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
summary_age_mod <- summary(m)
coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]
# Replace p-values with significance levels or rounded values
p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
ifelse(p_values < 0.01, "< 0.01",
ifelse(p_values < 0.05, "< 0.05",
round(p_values, 2))))
result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
return(result)
}
remove_outliers <- function(data, threshold = 3) {
m <- apply(data, 2, mean)  # Calculate medians for each variable
mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
# Calculate the outlier threshold as a multiple of MAD
outlier_threshold <- threshold * mad_values
# Identify outlier observations for each variable
outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
# Remove outlier observations from the dataset
cleaned_data <- data[!apply(outliers, 1, any), ]
return(cleaned_data)
}
# Extract eigenvalues from the PCA result
eigenvalues <- pca_result$values
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded
# [1] FALSE FALSE
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()
# function to test whether data is normally distributed
test_normality <- function(data) {
normality_test <- data %>%
summarise(across(everything(), ~ shapiro.test(.)$p.value))
return(normality_test)
}
# z transform data
z_transform <- function(data) {
# Calculate column-wise means and standard deviations
means <- colMeans(data)
std_devs <- apply(data, 2, sd)
# Z-transform each column
z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
return(z_transformed_data)
}
# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
summary_age_mod <- summary(m)
coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]
# Replace p-values with significance levels or rounded values
p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
ifelse(p_values < 0.01, "< 0.01",
ifelse(p_values < 0.05, "< 0.05",
round(p_values, 2))))
result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
return(result)
}
remove_outliers <- function(data, threshold = 3) {
m <- apply(data, 2, mean)  # Calculate medians for each variable
mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
# Calculate the outlier threshold as a multiple of MAD
outlier_threshold <- threshold * mad_values
# Identify outlier observations for each variable
outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
# Remove outlier observations from the dataset
cleaned_data <- data[!apply(outliers, 1, any), ]
return(cleaned_data)
}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df <- original_df %>% dplyr::select(
trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw
#trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
#trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot,
hamtot17,
hamtot28,
visit,
stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
df<-read.csv("../data_processed/df_all_brainage.csv")
# this file is created from the Jupyter notebook to produce the same 44 BD and 37 HC participants for analyses
df %>% group_by(dxgroupFK) %>% tally()
df <- df %>% dplyr::select("stdyptid", 'gender','dxgroupFK' ,"visit", 'ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit")
df  <- df %>% mutate(bpad_ridge = ridge_BrainAge - agevisit,
bpad_photon = age_prediction - agevisit,
bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
bpad_cnn = cnn_BrainAge - agevisit,
age2 = agevisit*2)
# remove NA values from each column in the data frame df while grouping the rows by the 'stdyptid' column
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid]
# remove any rows where agevisit == NA and select raws where visit == 'Baseline'
df <- df %>% filter(!is.na(agevisit), visit == "Baseline") %>% unique()
df <- merge(df, original_df, by = c("stdyptid", 'visit'))
df <- df %>%  mutate(tmtb_a = trlnctrw - trnsctrw,
stroop1 = cwiirw - (cwicnrw+cwiwrrw)/2,
stroop2 = cwiisrw - (cwicnrw+cwiwrrw)/2)%>%
mutate(gender = labelled(gender)) %>%
mutate(gender = ifelse(gender == "Male", 1, 0))%>%
mutate(dxgroupFK = labelled(dxgroupFK)) %>%
mutate(dxgroupFK = ifelse(dxgroupFK == "BD", 1, 0))
BD_only <- df %>% filter(dxgroupFK == 1)
# Select column by index position
cog_test_scores  <- BD_only %>% dplyr::select(c(15:22), stroop1, stroop2, tmtb_a ,stdyptid)%>% drop_na() %>% dplyr::select_if(~!all(is.na(.)))  # %>% filter(stroop1> 0, stroop2 >0, tmtb_a < 1500) #manual removal of outliers based on visualzation
# outliers are addressed in code beneath using mean absolute deviance
# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)
# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free") +
theme_bw()
# Calculate the mean for each column
means <- sapply(cog_test_scores, mean)
# Calculate the range for each column
mins <- sapply(cog_test_scores, min)
# Calculate the range for each column
maxs <- sapply(cog_test_scores, max)
# Calculate the count for each column
counts <- sapply(cog_test_scores, length)
# Calculate the standard deviation for each column
sds <- sapply(cog_test_scores, sd)
# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts)
summary_stats
cog_test_scores%>% dplyr::select(-  stdyptid) %>% test_normality() > 0.05 # only three scores are normal
# exclude three normal scores and z transform the remaining ones
non_normal_cog_test_scores <- cog_test_scores %>% dplyr::select(-c(trvsctrw, cwicnrw, cwiwrrw ))
non_normal_cog_test_scores <- non_normal_cog_test_scores #%>% dplyr::select(-c(trvsoerw))   # trvsoerw
# check for normality after z-transformation
non_normal_cog_test_scores %>% dplyr::select(-stdyptid) %>% z_transform() %>% test_normality() # still not normal
# BD109 trlnctrw, BD096 cwiisrw, BD098 trmsctrw outliers for three different measures
# there 5 were scores > 3 std devs above the mean
outliers_removed <- cog_test_scores %>%  # use mean absolute deviance
mutate_if(is.numeric, ~ ifelse(abs(. - mean(.)) / sd(.) <= 3, ., NA)) %>% filter_all(all_vars(!is.na(.)))  %>%
mutate_if(is.numeric, ~round(., 3))
outliers_removed %>% reshape2::melt(.) %>%ggplot(., aes(x = value)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free") +
theme_bw()
# Calculate the mean for each column
means <- sapply(outliers_removed, mean)
# Calculate the range for each column
mins <- sapply(outliers_removed, min)
# Calculate the range for each column
maxs <- sapply(outliers_removed, max)
# Calculate the count for each column
counts <- sapply(outliers_removed, length)
# Calculate the standard deviation for each column
sds <- sapply(outliers_removed, sd)
# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts) %>%filter_all(all_vars(!is.na(.)))
outliers_removed %>% select_if(is.numeric) %>% test_normality # cwiwrrw, cwicnrw, trmsctrw, trvsctrw
constant <- abs(min(outliers_removed$tmtb_a)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant
pca_result <-  outliers_removed %>%# consider as outlier as those out of 3 SD
select_if(is.numeric)    %>%
mutate_at(vars(-cwiwrrw, -cwicnrw, -trmsctrw, -trvsctrw), ~log10(.)) %>%
mutate_if(is.numeric, scale) %>%
mutate(
cwicnrw = -cwicnrw,
cwiwrrw = -cwiwrrw,
cwiirw = -cwiirw,
cwiisrw = -cwiisrw
) %>% principal(nfactors =   1)   # remove the ouliters based on rows with NA
# create a df where outliers have been removed but all other vars (e.g., age) are included
outliers_removed_df <- df %>% filter(stdyptid %in% outliers_removed$stdyptid)
# column bind the df with outliers removed and the pca scores
outliers_removed_df_pc <- cbind(as.data.frame(outliers_removed_df), pca_result$scores)
outliers_removed_df_pc
# Extract eigenvalues from the PCA result
eigenvalues <- pca_result$values
# Calculate the proportion of variance explained by each principal component
variance_explained <- eigenvalues / sum(eigenvalues)
# Create a scree plot
plot(1:length(variance_explained), variance_explained, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot")
pca_cog_mod <- lm(bpad_ridge ~ PC1 + agevisit+ gender + gender*agevisit, data = outliers_removed_df_pc)
summary(pca_cog_mod)
pca_cog_mod <- lm(bpad_photon ~ PC1 + agevisit+ gender + gender*agevisit, data = outliers_removed_df_pc)
summary(pca_cog_mod)
pca_cog_mod <- lm(bpad_BrainAgeR ~ PC1 + agevisit, data = outliers_removed_df_pc)
summary(pca_cog_mod)
# Plot the distribution of cog scores using facet_wrap
outliers_removed_df_pc %>% ggplot(., aes(x = PC1, y = bpad_ridge)) +
geom_point() +
theme_bw()
outliers_removed_df_pc %>% ggplot(., aes(x = TC1, y = bpad_ridge)) +
geom_point() +
theme_bw()
libraries <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest"
, "metaforest", "rstatix", "labelled", "data.table")
lapply(libraries, install.packages , character.only = TRUE)
lapply(libraries, require , character.only = TRUE)
#cnn_df <- read.csv("../data_original/wood_2022_brainage.csv")
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df <- original_df %>% dplyr::select("trnsctrw", "cwiisnrs","cwiisis", "cwiicns","fsrp5","stdyptid") %>% filter(!is.na(trnsctrw)|!is.na(fsrp5)) %>% arrange(stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
df <- df %>% dplyr::select('ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit",
"stdyptid", "agevisit", "visit",
'gender','dxgroupFK'  )
df  <- df %>% mutate(Age2 = agevisit**2, Age3 = agevisit**3,
bpad_ridge = ridge_BrainAge - agevisit,
bpad_photon = age_prediction - agevisit,
bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
bpad_cnn = cnn_BrainAge - agevisit)
df
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid]
df <- df %>% filter(!is.na(agevisit), visit == "Baseline") %>% unique()
df <- merge(df, original_df, by = "stdyptid")
df
#df  #%>% select(stdyptid) %>% print()
ggplot(df, aes(x=bpad_ridge)) +
geom_density() + theme_classic()
ggplot(df, aes(x=bpad_BrainAgeR)) +
geom_density() + theme_classic()
ggplot(df, aes(x=ageprediction_BrainAgeR)) +
geom_density() + theme_classic()
ggplot(df, aes(x=ridge_BrainAge)) +
geom_density() + theme_classic()
## predicted brain ages
df %>%
dplyr::select(ridge_BrainAge, ageprediction_BrainAgeR, age_prediction) %>% cor('spearman')
## predicted brain ages
df %>%
dplyr::select(ridge_BrainAge, ageprediction_BrainAgeR, age_prediction) %>% cor(.,'spearman')
