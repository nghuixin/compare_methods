---
title: "compare_four_models_cog_function"
author: "Hui Xin Ng"
date: "2023-07-15"
output: html_document
---

```{r setup, include=FALSE}
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
               , "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'irr', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded

pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()

```

# Functions
```{r}
# function to test whether data is normally distributed
test_normality <- function(data) {
  normality_test <- data %>%
  summarise(across(everything(), ~ shapiro.test(.)$p.value))
  return(normality_test)
}
## Helper functions
getPartialEtaSq<-function(m_fixed) {
  petasq <- round(as.data.frame(EtaSq(m_fixed))[2],3)
  return(petasq) }

# z transform data
z_transform <- function(data) {
  # Calculate column-wise means and standard deviations
  means <- colMeans(data)
  std_devs <- apply(data, 2, sd) 
  # Z-transform each column
  z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
  return(z_transformed_data)
}

# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
  summary_age_mod <- summary(m) 
  coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
  p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]  
  
  # Replace p-values with significance levels or rounded values
  p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
                               ifelse(p_values < 0.01, "< 0.01",
                                      ifelse(p_values < 0.05, "< 0.05",
                                             round(p_values, 2)))) 
  result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
  rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
  result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
  return(result)
}

remove_outliers <- function(data, threshold = 3) {
  m <- apply(data, 2, mean)  # Calculate medians for each variable
  mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
  
  # Calculate the outlier threshold as a multiple of MAD
  outlier_threshold <- threshold * mad_values
  
  # Identify outlier observations for each variable
  outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
  
  # Remove outlier observations from the dataset
  cleaned_data <- data[!apply(outliers, 1, any), ]
  
  return(cleaned_data)
}
``` 
   
```{r cars}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")

original_df = read_sav(path)
original_df%>% group_by(mri_scrn, dxgroup) %>% tally()


original_df <- original_df %>% dplyr::select(
agevisit,
dxgroupFK,
trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw  

#trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
#trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)

trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw

cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist

cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw 

scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot, 
hamtot17,
hamtot28,

visit,
stdyptid) 
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]

original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
original_df

original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223'))  #BD087, BD223 need to check if this was part of training

training_set <- original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223')) # only healthy individuals
 

original_df

```

```{r}
shapiro.test(training_set$agevisit)
# test set
age_groups <- cut(df$agevisit, breaks = c(30, 40, 50, 60, 70, 80), labels = c("30-39", "40-49", "50-59","60-69","70-79" ))

# Calculate frequencies of each age group
age_group_freq <- table(age_groups)

# Calculate total number of observations
total_obs <- sum(age_group_freq)

# Calculate proportions of each age group
age_group_prop <- age_group_freq / total_obs

# Plot proportions of each age group
barplot(age_group_prop, main = "Proportion of Age Groups", xlab = "Age Group", ylab = "Proportion")

# proportion of each age group is the same 
age_groups <- cut(training_set$agevisit, breaks = c(30, 40, 50, 60, 70, 80), labels = c("30-39", "40-49", "50-59","60-69","70-79" ))

# Calculate frequencies of each age group
age_group_freq <- table(age_groups)

# Calculate total number of observations
total_obs <- sum(age_group_freq)

# Calculate proportions of each age group
age_group_prop <- age_group_freq / total_obs

# Plot proportions of each age group
barplot(age_group_prop, main = "Proportion of Age Groups", xlab = "Age Group", ylab = "Proportion")

```
 

```{r}
df<-read.csv("../data_processed/df_all_brainage.csv") 

# this file is created from the Jupyter notebook to produce the same 44 BD and 37 HC participants for analyses  
df <- df %>% dplyr::select("stdyptid", 'gender','dxgroupFK' ,"visit", 'ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit")  
 
df  <- df %>% mutate(bpad_ridge = ridge_BrainAge - agevisit,
                     bpad_photon = age_prediction - agevisit,
                     bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
                     bpad_cnn = cnn_BrainAge - agevisit,
                     age2 = agevisit*2)

# remove NA values from each column in the data frame df while grouping the rows by the 'stdyptid' column
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid] 

df$dxgroupFK <- haven::labelled(as.numeric(factor(df$dxgroupFK, levels = c("HC", "BD"))), labels = c('HC' = 0, 'BD' = 1))


# remove any rows where agevisit == NA and select raws where visit == 'Baseline'
df <- df %>% filter(!is.na(agevisit), visit == "Baseline") %>% unique()


df <- merge(df, original_df, by = c("stdyptid", 'visit')) 
df

df <- df %>%  mutate(tmtb_a = trlnctrw - trnsctrw,
                     stroop1 = cwiirw - (cwicnrw+cwiwrrw)/2,
                     stroop2 = cwiisrw - (cwicnrw+cwiwrrw)/2)%>%
  mutate(gender = labelled(gender)) %>%
  mutate(gender = ifelse(gender == "Male", 1, 0))%>%
  mutate(dxgroupFK = labelled(dxgroupFK)) %>%
  mutate(dxgroupFK = ifelse(dxgroupFK == "BD", 1, 0)) 

ggplot(training_set, aes(x = agevisit, fill = factor(dxgroupFK))) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Ages Across Two Groups",
       x = "Age",
       y = "Density",
       fill = "Group")



ggplot(df, aes(x = agevisit, fill = factor(dxgroupFK))) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Ages Across Two Groups",
       x = "Age",
       y = "Density",
       fill = "Group")



ggplot(original_df, aes(x = agevisit, fill = factor(dxgroupFK))) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribution of Ages Across Two Groups",
       x = "Age",
       y = "Density",
       fill = "Group")

df

```

### Cognitive Performance Scores as predictor of brain-PAD 
```{r pressure, echo=FALSE}
BD_only <- df %>% filter(dxgroupFK == 1)
BD_only
```

### Cognitive scores distribution and summary stats of both BD and HC
```{r}
# Select column by index position
cog_test_scores  <- df %>% dplyr::select(c(15:22), stroop1, stroop2, tmtb_a ,stdyptid)%>% drop_na() %>% dplyr::select_if(~!all(is.na(.)))  # %>% filter(stroop1> 0, stroop2 >0, tmtb_a < 1500) #manual removal of outliers based on visualzation
# outliers are addressed in code beneath using mean absolute deviance 

# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)

# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw() 
 
# Calculate the mean for each column
means <- sapply(cog_test_scores, mean)

# Calculate the range for each column
mins <- sapply(cog_test_scores, min)

# Calculate the range for each column
maxs <- sapply(cog_test_scores, max)

# Calculate the count for each column
counts <- sapply(cog_test_scores, length)

# Calculate the standard deviation for each column
sds <- sapply(cog_test_scores, sd)

# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts)
summary_stats
```
### Plot distribution of z-transformed non-normal cognitive scores
```{r}
cog_test_scores%>% dplyr::select(-  stdyptid) %>% test_normality() > 0.05 # none of the scores are normal (when BD and HC are included)

```

```{r}
# there 5 subjects with scores > 3 std devs above the mean

# Identify and remove outliers using the Mean Absolute Deviance (MAD) method
# Keep data points where absolute deviation from the mean is within 2 standard deviations
# This effectively removes values more than 2 standard deviations above or below the mean
outliers_removed <- cog_test_scores %>%
  mutate_if(is.numeric, ~ ifelse(abs(. - mean(.)) / sd(.) <= 3, ., NA)) %>%
  filter_all(all_vars(!is.na(.))) %>%
  mutate_if(is.numeric, ~ round(., 3))

# Reshape the dataset into long format using melt from reshape2 package
# Create histograms for each variable, showing the distribution of values after removing outliers
# Facet the histograms by variable to compare distributions
outliers_removed %>%
  reshape2::melt(.) %>%
  ggplot(., aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()
  

# Calculate the mean for each column
means <- sapply(outliers_removed, mean)

# Calculate the range for each column
mins <- sapply(outliers_removed, min)

# Calculate the range for each column
maxs <- sapply(outliers_removed, max)

# Calculate the count for each column
counts <- sapply(outliers_removed, length)

# Calculate the standard deviation for each column
sds <- sapply(outliers_removed, sd)

# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts) %>%filter_all(all_vars(!is.na(.)))

outliers_removed %>% select_if(is.numeric) %>% test_normality # cwiwrrw, cwicnrw, trmsctrw, trvsctrw
```

```{r}
constant <- abs(min(outliers_removed$tmtb_a)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant  

# Perform Principal Component Analysis (PCA) on the 'outliers_removed' data frame
pca_result <-  outliers_removed %>%
  # Consider observations as outliers if they are more than 2 standard deviations from the mean
  select_if(is.numeric) %>%  log10(.) %>% 
  
  # Apply a logarithmic transformation to numeric columns (except specific ones)
 # mutate_at(vars(-cwiwrrw, -cwicnrw, -trmsctrw, -trvsctrw), ~log10(.)) %>%
  
  # Standardize (scale) all numeric columns
  mutate_if(is.numeric, scale) %>%
  # Negate the values of specific columns because these represent worse cognitive performance if they are lower
    mutate(
    cwicnrw = -cwicnrw,
    cwiwrrw = -cwiwrrw,
    cwiirw = -cwiirw,
    cwiisrw = -cwiisrw
  )  %>%
  # Perform PCA with one factor (component)
   principal(nfactors = 1) 
# create a df where outliers have been removed but all other variables (e.g., age) are included
outliers_removed_df <- df %>% filter(stdyptid %in% outliers_removed$stdyptid)
 
# column bind the df with outliers removed and the pca scores
outliers_removed_df_pc <- cbind(as.data.frame(outliers_removed_df), pca_result$scores*-1)
outliers_removed_df_pc %>% group_by(dxgroupFK) %>% tally() #BD=38, HC=33
```

### Scree Plot
```{r}
# Extract eigenvalues from the PCA result
eigenvalues <- pca_result$values

# Calculate the proportion of variance explained by each principal component
variance_explained <- eigenvalues / sum(eigenvalues)

# Create a scree plot
plot(1:length(variance_explained), variance_explained, type = "b", 
     xlab = "Principal Component", ylab = "Proportion of Variance Explained",
     main = "Scree Plot")
variance_explained
```

# Linear regression model with bpad as outcome variable
### Ridge Bpad
```{r}
resid_mod <- lm(bpad_ridge ~   gender*agevisit, data = outliers_removed_df_pc)
summary(resid_mod)
resid_bpad_ridge <- resid(resid_mod)
grubbs.test(resid_bpad_ridge)

pca_cog_mod <- lm(PC1 ~  resid_bpad_ridge, data = outliers_removed_df_pc)
summary(pca_cog_mod)
getPartialEtaSq(pca_cog_mod)
```

### PHOTON Bpad
```{r}
resid_mod <- lm(bpad_photon ~ gender*agevisit, data = outliers_removed_df_pc)
summary(resid_mod)
resid_bpad_photon <- resid(resid_mod)
pca_cog_mod <- lm(PC1 ~ resid_bpad_photon, data = outliers_removed_df_pc)
summary(pca_cog_mod)
getPartialEtaSq(pca_cog_mod)

```


### BrainAgeR Bpad
```{r}
resid_mod <- lm(bpad_BrainAgeR ~   gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_BrainAgeR <- resid(resid_mod)
grubbs.test(resid_bpad_BrainAgeR)
summary(resid_mod)
pca_cog_mod <- lm(PC1 ~  resid_bpad_BrainAgeR  , data = outliers_removed_df_pc)
summary(pca_cog_mod)
getPartialEtaSq(pca_cog_mod) 
 
```

```{r}
resid_mod <- lm(bpad_cnn ~   gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_cnn <- resid(resid_mod)
grubbs.test(resid_bpad_cnn)
 
pca_cog_mod <- lm(PC1 ~ resid_bpad_cnn, data = outliers_removed_df_pc)
summary(pca_cog_mod) 
getPartialEtaSq(pca_cog_mod) 

 
``` 

### Four subplots showing the linear relationship between resid bpad and PC1

```{r}
#jpeg('resid_bpad_pc1.jpeg', width = 4000, height = 4000, units = "px", res = 500)

# Calculate R-squared for the entire dataset
r2_values_BrainAgeR <- summary(lm(PC1 ~ resid_bpad_BrainAgeR, data = outliers_removed_df_pc))$r.squared

base_plot <- ggplot(outliers_removed_df_pc, aes(x = resid_bpad_BrainAgeR, y = PC1, color = factor(dxgroupFK))) +
  geom_point() + geom_smooth(aes(group = factor(dxgroupFK), color = factor(dxgroupFK)), method = "lm", formula = y ~ x, se = FALSE) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = 'darkorchid2') + # Add the purple linear regression line
  scale_color_manual(name = "Diagnosis Group", labels = c("HC", "BD"), values = c('darkblue', 'red')) +
  theme_bw() +
  theme(text = element_text(size = 11), legend.position = "bottom") +
  coord_cartesian(xlim = c(-20, 20), ylim = c(-3, 3))
r2_values_BrainAgeR <- summary(lm(PC1 ~ resid_bpad_BrainAgeR, data = outliers_removed_df_pc))$r.squared
# Annotate the plot with R-squared values for the first variable
plot1 <- base_plot +
  geom_richtext(aes(label = paste0("R<sup>2</sup> = ", format(round(r2_values_BrainAgeR, digits=3), nsmall = 2) ), x = Inf, y = -Inf, hjust = 1, vjust = -0.5), color = 'black') +
  labs(x = "Residual Brain-PAD", title = "BrainageR")
plot1
 
base_plot <- ggplot(outliers_removed_df_pc, aes(x = resid_bpad_photon, y = PC1,  color = factor(dxgroupFK)))   +
  geom_point()  +
  geom_point() + geom_smooth(aes(group = factor(dxgroupFK), color = factor(dxgroupFK)), method = "lm", formula = y ~ x, se = FALSE) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = 'darkorchid2') + # Add the purple linear regression line
  scale_color_manual(name = "Diagnosis Group", labels = c("HC", "BD"), values = c('darkblue', 'red')) +
  theme_bw() +
  theme(text = element_text(size = 11), legend.position = "bottom") +
  coord_cartesian(xlim = c(-20, 20), ylim = c(-3, 3))
r2_values_photon <- summary(lm(PC1 ~ resid_bpad_photon, data = outliers_removed_df_pc))$r.squared

plot2 <- base_plot +
 geom_richtext(aes(label = paste0("R<sup>2</sup> = ",  format(round(r2_values_photon, digits=3), nsmall = 2) ), x = Inf, y = -Inf, hjust = 1, vjust = -0.5), color = 'black') +
  labs(x = "Residual Brain-PAD",title = "PHOTON-BA")

base_plot <- ggplot(outliers_removed_df_pc, aes(x = resid_bpad_cnn, y = PC1, color = factor(dxgroupFK)))   +
  geom_point() + geom_smooth(aes(group = factor(dxgroupFK), color = factor(dxgroupFK)), method = "lm", formula = y ~ x, se = FALSE) + geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = 'darkorchid2') + # Add the purple linear regression line
  scale_color_manual(name = "Diagnosis Group", labels = c("HC", "BD"), values = c('darkblue', 'red')) +
  theme_bw() +
  theme(text = element_text(size = 11), legend.position = "bottom") +
  coord_cartesian(xlim = c(-20, 20), ylim = c(-3, 3))

r2_values_cnn <- summary(lm(PC1 ~ resid_bpad_cnn, data = outliers_removed_df_pc))$r.squared
plot3 <- base_plot +  geom_richtext(aes(label = paste0("R<sup>2</sup> = ", format(round(r2_values_cnn, digits=3), nsmall = 2) ), x = Inf, y = -Inf, hjust = 1, vjust = -0.5), color = 'black') + labs(x = "Residual Brain-PAD",title = "MIDI")


base_plot <- ggplot(outliers_removed_df_pc, aes(x = resid_bpad_ridge, y = PC1, color = factor(dxgroupFK)))   +
  geom_point() + geom_smooth(aes(group = factor(dxgroupFK), color = factor(dxgroupFK)), method = "lm", formula = y ~ x, se = FALSE) + geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = 'darkorchid2') + # Add the purple linear regression line
  scale_color_manual(name = "Diagnosis Group", labels = c("HC", "BD"), values = c('darkblue', 'red')) +
  theme_bw() +
  theme(text = element_text(size = 11), legend.position = "bottom") +
  coord_cartesian(xlim = c(-20, 20), ylim = c(-3, 3))


r2_values_ridge <- summary(lm(PC1 ~ resid_bpad_ridge, data = outliers_removed_df_pc))$r.squared
plot4 <- base_plot +
  geom_richtext(aes(label = paste0("R<sup>2</sup> = ", format(round(r2_values_ridge, digits=3), nsmall = 2) ), x = Inf, y = -Inf, hjust = 1, vjust = -0.5), color = 'black') +
  labs(x = "Residual Brain-PAD", title = 'UCSD Multimodal')



combined_plot <- grid.arrange(plot1, plot2, plot3, plot4, ncol = 2) 
caption <- "Figure 1. There was no significant interaction between diagnosis and residual brain-PAD. Across all brain age algorithms, the BD group shows a non-significant negative trend between residual brain-PAD and cognition. Some algorithms (e.g., BrainageR and MIDI) are better able to detect the differential strength in the relationship between residual brain-PAD and cognition in BD as demonstrated by their larger non-significant effect sizes. The residual brain-PAD from BrainageR (b=-0.04, t= -2.62, p < 0.05, ηp2= 0.091) showed the strongest overall relationship to cognitive performance. "

# Adjust plot margins to make space for the caption
combined_plot <- combined_plot + theme(plot.margin = margin(1, 1, 10, 11))

combined_plot <- arrangeGrob(
  combined_plot,
  bottom = textGrob(
    label = caption,
    x = 0.5, y = -0.02,  # Adjust the y position to move text up
    just = "center",
    gp = gpar(fontsize = 11)
  )
)


ggsave(filename = "combined_plot_with_caption.jpeg", plot = combined_plot, width = 10, height = 10, dpi = 500)  

#dev.off()

 
```
 
```{r}
# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)

# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()
```

### Log transform cog scores
```{r}
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3577045/ PCA to run on DKEFS
constant <- abs(min(outliers_removed$tmtb_a)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant  

# Add a constant to the scores to make them positive
log_transformed <- outliers_removed %>%  mutate_if(., is.numeric, log10)
log_transformed %>% select(is.numeric) %>% test_normality()

log_transformed %>% reshape2::melt(.) %>%ggplot(., aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()

# Specify the columns to select from df2
selected_columns <- c("dxgroupFK", "gender", "agevisit", "stdyptid", 'bpad_photon', 'bpad_ridge', 'bpad_BrainAgeR', 'bpad_cnn', 'age_prediction', 'ageprediction_BrainAgeR', 'ridge_BrainAge', 'cnn_BrainAge')

# Merge df1 and selected columns from df2
log_transformed_with_covar <- merge(log_transformed, select(BD_only, selected_columns), by = "stdyptid")

head(df)
```

### Corr heatmap of log-transformed cognitive test scores
```{r}
# Calculate Spearman's rank correlation coefficients
r <- log_transformed_with_covar %>%
  select(-c("dxgroupFK", "gender", "agevisit", "stdyptid", 'bpad_photon', 'bpad_ridge', 'bpad_BrainAgeR')) %>% as.matrix() %>% Hmisc::rcorr(., type = 'spearman')

p <-  r$P 

heatmap_data <- heatmaply_cor(
  r$r,
  onlylower = TRUE,
  node_type = "scatter",
  point_size_mat = -log10(p), 
  point_size_name = "-log10(p-value)",
  label_names = c("x", "y", "Correlation")
) 

# Select the cognitive variables and the variables of interest
cognitive_variables <- log_transformed_with_covar %>%
  select(trvsctrw,   trnsctrw, trlnctrw, trmsctrw, cwicnrw, cwiwrrw, cwiirw, cwiisrw)
variables_of_interest <- log_transformed_with_covar %>%
  select(bpad_photon, bpad_ridge, bpad_BrainAgeR)

# Calculate the correlations
correlation_matrix <- cor(cognitive_variables, variables_of_interest)

# Create the heatmap
heatmaply_cor(correlation_matrix, 
        col = colorRampPalette(c("blue", "white", "red"))(10), # Choose a color palette
        main = "Correlation between Brain-PADs and Cognitive Variables",
        ylab = "Cognitive Variables",
        xlab = "Brain-PAD across Models")


# Select the cognitive variables and the variables of interest
cognitive_variables <- log_transformed_with_covar %>%
  select(trvsctrw,   trnsctrw, trlnctrw, trmsctrw, cwicnrw, cwiwrrw, cwiirw, cwiisrw)
variables_of_interest <- log_transformed_with_covar %>%
  select(agevisit, ageprediction_BrainAgeR, age_prediction, ridge_BrainAge, cnn_BrainAge)

# Calculate the correlations
correlation_matrix <- cor(cognitive_variables, variables_of_interest)
 head(log_transformed_with_covar)

# Create the heatmap
heatmaply_cor(correlation_matrix, 
        col = colorRampPalette(c("blue", "white", "red"))(10), # Choose a color palette
        main = "Correlation between Brain-PADs and Cognitive Variables",
        ylab = "Cognitive Variables",
        xlab = "Predicted Brain Age across Models")
```
  