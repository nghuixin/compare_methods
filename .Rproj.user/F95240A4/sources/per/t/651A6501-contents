---
title: "compare_four_models_cog_function"
author: "Hui Xin Ng"
date: "2023-07-15"
output: html_document
---

```{r setup, include=FALSE}
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
               , "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers', 'heatmaply', 'Hmisc', 'psych')
pckgs %in% loadedNamespaces() # check if the packages are loaded
# [1] FALSE FALSE
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()

```

# Functions
```{r}
# function to test whether data is normally distributed
test_normality <- function(data) {
  normality_test <- data %>%
  summarise(across(everything(), ~ shapiro.test(.)$p.value))
  return(normality_test)
}
## Helper functions
getPartialEtaSq<-function(m_fixed) {
  petasq <- round(as.data.frame(EtaSq(m_fixed))[2],3)
  return(petasq) }

# z transform data
z_transform <- function(data) {
  # Calculate column-wise means and standard deviations
  means <- colMeans(data)
  std_devs <- apply(data, 2, sd) 
  # Z-transform each column
  z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
  return(z_transformed_data)
}

# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
  summary_age_mod <- summary(m) 
  coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
  p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]  
  
  # Replace p-values with significance levels or rounded values
  p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
                               ifelse(p_values < 0.01, "< 0.01",
                                      ifelse(p_values < 0.05, "< 0.05",
                                             round(p_values, 2)))) 
  result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
  rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
  result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
  return(result)
}

remove_outliers <- function(data, threshold = 3) {
  m <- apply(data, 2, mean)  # Calculate medians for each variable
  mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
  
  # Calculate the outlier threshold as a multiple of MAD
  outlier_threshold <- threshold * mad_values
  
  # Identify outlier observations for each variable
  outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
  
  # Remove outlier observations from the dataset
  cleaned_data <- data[!apply(outliers, 1, any), ]
  
  return(cleaned_data)
}
``` 
 
```{r cars}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)

original_df <- original_df %>% dplyr::select(
  
trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw  

#trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
#trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)

trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw

cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist

cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw 

scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot, 
hamtot17,
hamtot28,
visit,
stdyptid) 
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]

original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
```
# read csv where all brainages are contained
```{r}
df<-read.csv("../data_processed/df_all_brainage.csv") 
# this file is created from the Jupyter notebook to produce the same 44 BD and 37 HC participants for analyses  
df %>% group_by(dxgroupFK) %>% tally()
```

```{r}
df <- df %>% dplyr::select("stdyptid", 'gender','dxgroupFK' ,"visit", 'ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit")  
 
df  <- df %>% mutate(bpad_ridge = ridge_BrainAge - agevisit,
                     bpad_photon = age_prediction - agevisit,
                     bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
                     bpad_cnn = cnn_BrainAge - agevisit,
                     age2 = agevisit*2)

# remove NA values from each column in the data frame df while grouping the rows by the 'stdyptid' column
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid] 

# remove any rows where agevisit == NA and select raws where visit == 'Baseline'
df <- df %>% filter(!is.na(agevisit), visit == "Baseline") %>% unique()


df <- merge(df, original_df, by = c("stdyptid", 'visit')) 

df <- df %>%  mutate(tmtb_a = trlnctrw - trnsctrw,
                     stroop1 = cwiirw - (cwicnrw+cwiwrrw)/2,
                     stroop2 = cwiisrw - (cwicnrw+cwiwrrw)/2)%>%
  mutate(gender = labelled(gender)) %>%
  mutate(gender = ifelse(gender == "Male", 1, 0))%>%
  mutate(dxgroupFK = labelled(dxgroupFK)) %>%
  mutate(dxgroupFK = ifelse(dxgroupFK == "BD", 1, 0)) 


```

### Cognitive Performance Scores as predictor of brain-PAD 
```{r pressure, echo=FALSE}
BD_only <- df %>% filter(dxgroupFK == 1)
BD_only
```

### Cognitive scores distribution and summary stats of both BD and HC
```{r}
# Select column by index position
cog_test_scores  <- df %>% dplyr::select(c(15:22), stroop1, stroop2, tmtb_a ,stdyptid)%>% drop_na() %>% dplyr::select_if(~!all(is.na(.)))  # %>% filter(stroop1> 0, stroop2 >0, tmtb_a < 1500) #manual removal of outliers based on visualzation
# outliers are addressed in code beneath using mean absolute deviance 

# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)

# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw() 
 
# Calculate the mean for each column
means <- sapply(cog_test_scores, mean)

# Calculate the range for each column
mins <- sapply(cog_test_scores, min)

# Calculate the range for each column
maxs <- sapply(cog_test_scores, max)

# Calculate the count for each column
counts <- sapply(cog_test_scores, length)

# Calculate the standard deviation for each column
sds <- sapply(cog_test_scores, sd)

# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts)
summary_stats
```
### Plot distribution of z-transformed non-normal cognitive scores
```{r}
cog_test_scores%>% dplyr::select(-  stdyptid) %>% test_normality() > 0.05 # only three scores are normal

# exclude three normal scores and z transform the remaining ones
non_normal_cog_test_scores <- cog_test_scores %>% dplyr::select(-c(trvsctrw, cwicnrw, cwiwrrw )) 
non_normal_cog_test_scores <- non_normal_cog_test_scores #%>% dplyr::select(-c(trvsoerw))   # trvsoerw

# check for normality after z-transformation
non_normal_cog_test_scores %>% dplyr::select(-stdyptid) %>% z_transform() %>% test_normality() # still not normal
# BD109 trlnctrw, BD096 cwiisrw, BD098 trmsctrw outliers for three different measures
```

```{r}
# there 5 were scores > 3 std devs above the mean
outliers_removed <- cog_test_scores %>%  # use mean absolute deviance
    mutate_if(is.numeric, ~ ifelse(abs(. - mean(.)) / sd(.) <= 3, ., NA)) %>% filter_all(all_vars(!is.na(.)))  %>%
  mutate_if(is.numeric, ~round(., 3))

outliers_removed %>% reshape2::melt(.) %>%ggplot(., aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()  

# Calculate the mean for each column
means <- sapply(outliers_removed, mean)

# Calculate the range for each column
mins <- sapply(outliers_removed, min)

# Calculate the range for each column
maxs <- sapply(outliers_removed, max)

# Calculate the count for each column
counts <- sapply(outliers_removed, length)

# Calculate the standard deviation for each column
sds <- sapply(outliers_removed, sd)

# Combine the results into a data frame
summary_stats <- data.frame(Means = means,  SD = sds, Min = mins, Max = maxs, Count = counts) %>%filter_all(all_vars(!is.na(.)))

outliers_removed %>% select_if(is.numeric) %>% test_normality # cwiwrrw, cwicnrw, trmsctrw, trvsctrw
```

```{r}
constant <- abs(min(outliers_removed$tmtb_a)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant  

pca_result <-  outliers_removed %>%# consider as outlier as those out of 3 SD
  select_if(is.numeric)    %>%   
  mutate_at(vars(-cwiwrrw, -cwicnrw, -trmsctrw, -trvsctrw), ~log10(.)) %>%
 mutate_if(is.numeric, scale) %>% 
  mutate(
    cwicnrw = -cwicnrw,
    cwiwrrw = -cwiwrrw,
    cwiirw = -cwiirw,
    cwiisrw = -cwiisrw
  ) %>% principal(nfactors =   1)   # remove the ouliters based on rows with NA 

# create a df where outliers have been removed but all other vars (e.g., age) are included
outliers_removed_df <- df %>% filter(stdyptid %in% outliers_removed$stdyptid)

# column bind the df with outliers removed and the pca scores
outliers_removed_df_pc <- cbind(as.data.frame(outliers_removed_df), pca_result$scores)
outliers_removed_df_pc %>% group_by(dxgroupFK) %>% tally() #BD=38, HC=33
```

### Scree Plot
```{r}
# Extract eigenvalues from the PCA result
eigenvalues <- pca_result$values

# Calculate the proportion of variance explained by each principal component
variance_explained <- eigenvalues / sum(eigenvalues)

# Create a scree plot
plot(1:length(variance_explained), variance_explained, type = "b", 
     xlab = "Principal Component", ylab = "Proportion of Variance Explained",
     main = "Scree Plot")
```

# Linear regression model with bpad as outcome variable
### Ridge Bpad
```{r}
resid_mod <- lm(bpad_ridge ~  agevisit+ gender + gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_ridge <- resid(resid_mod)
grubbs.test(resid_bpad_ridge)

pca_cog_mod <- lm(PC1 ~ dxgroupFK*resid_bpad_ridge, data = outliers_removed_df_pc)
summary(pca_cog_mod)
getPartialEtaSq(pca_cog_mod)
```

### PHOTON Bpad
```{r}
resid_mod <- lm(bpad_photon ~  agevisit+ gender + gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_photon <- resid(resid_mod)

grubbs.test(resid_bpad_photon)

pca_cog_mod <- lm(PC1 ~ dxgroupFK*resid_bpad_photon, data = outliers_removed_df_pc)
summary(pca_cog_mod)

getPartialEtaSq(pca_cog_mod)
```

### BrainAgeR Bpad
```{r}
resid_mod <- lm(bpad_BrainAgeR ~  agevisit, data = outliers_removed_df_pc)
resid_bpad_BrainAgeR <- resid(resid_mod)
grubbs.test(resid_bpad_BrainAgeR)

pca_cog_mod <- lm(PC1 ~ dxgroupFK*resid_bpad_BrainAgeR + dxgroupFK + resid_bpad_BrainAgeR, data = outliers_removed_df_pc)
summary(pca_cog_mod)


 
getPartialEtaSq(pca_cog_mod) 

```

```{r}

# pca_cog_mod <- lm(bpad_cnn ~ PC1 + agevisit+ gender + gender*agevisit, data = outliers_removed_df_pc)
# summary(pca_cog_mod) 
# 

resid_mod <- lm(bpad_cnn ~  agevisit + gender + gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_cnn <- resid(resid_mod)
grubbs.test(resid_bpad_cnn)
 
pca_cog_mod <- lm(PC1 ~ dxgroupFK*resid_bpad_cnn, data = outliers_removed_df_pc)
summary(pca_cog_mod)

 
getPartialEtaSq(pca_cog_mod) 
```


```{r}
# Plot the distribution of cog scores using facet_wrap
library(ggplot2)

# Function to create scatterplots for a specific variable
create_scatterplot <- function(data, x_var, y_var ) {
  ggplot(data, aes_string(x = x_var)) +
    geom_point(aes_string(y = y_var, )) +
    theme_bw() 
}

# Usage example for "bpad_ridge"
create_scatterplot(outliers_removed_df_pc, "PC1", "bpad_ridge" )

# Usage example for "bpad_cnn"
create_scatterplot(outliers_removed_df_pc, "PC1", "bpad_cnn" )

create_scatterplot(outliers_removed_df_pc, "PC1", "bpad_photon" )


create_scatterplot(outliers_removed_df_pc, "PC1", "bpad_photon" )
```


```{r}
# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)

# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()
```

### Log transform cog scores
```{r}
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3577045/ PCA to run on DKEFS
constant <- abs(min(outliers_removed$tmtb_a)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant  

# Add a constant to the scores to make them positive
log_transformed <- outliers_removed %>%  mutate_if(., is.numeric, log10)
log_transformed %>% select(is.numeric) %>% test_normality()

log_transformed %>% reshape2::melt(.) %>%ggplot(., aes(x = value)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free") +
  theme_bw()

# Specify the columns to select from df2
selected_columns <- c("dxgroupFK", "gender", "agevisit", "stdyptid", 'bpad_photon', 'bpad_ridge', 'bpad_BrainAgeR', 'bpad_cnn', 'age_prediction', 'ageprediction_BrainAgeR', 'ridge_BrainAge', 'cnn_BrainAge')

# Merge df1 and selected columns from df2
log_transformed_with_covar <- merge(log_transformed, select(BD_only, selected_columns), by = "stdyptid")

head(df)
```

### Corr heatmap of log-transformed cognitive test scores
```{r}
# Calculate Spearman's rank correlation coefficients
r <- log_transformed_with_covar %>%
  select(-c("dxgroupFK", "gender", "agevisit", "stdyptid", 'bpad_photon', 'bpad_ridge', 'bpad_BrainAgeR')) %>% as.matrix() %>% Hmisc::rcorr(., type = 'spearman')

p <-  r$P 

heatmap_data <- heatmaply_cor(
  r$r,
  onlylower = TRUE,
  node_type = "scatter",
  point_size_mat = -log10(p), a
  point_size_name = "-log10(p-value)",
  label_names = c("x", "y", "Correlation")
) 

# Select the cognitive variables and the variables of interest
cognitive_variables <- log_transformed_with_covar %>%
  select(trvsctrw,   trnsctrw, trlnctrw, trmsctrw, cwicnrw, cwiwrrw, cwiirw, cwiisrw)
variables_of_interest <- log_transformed_with_covar %>%
  select(bpad_photon, bpad_ridge, bpad_BrainAgeR)

# Calculate the correlations
correlation_matrix <- cor(cognitive_variables, variables_of_interest)

# Create the heatmap
heatmaply_cor(correlation_matrix, 
        col = colorRampPalette(c("blue", "white", "red"))(10), # Choose a color palette
        main = "Correlation between Brain-PADs and Cognitive Variables",
        ylab = "Cognitive Variables",
        xlab = "Brain-PAD across Models")


# Select the cognitive variables and the variables of interest
cognitive_variables <- log_transformed_with_covar %>%
  select(trvsctrw,   trnsctrw, trlnctrw, trmsctrw, cwicnrw, cwiwrrw, cwiirw, cwiisrw)
variables_of_interest <- log_transformed_with_covar %>%
  select(agevisit, ageprediction_BrainAgeR, age_prediction, ridge_BrainAge, cnn_BrainAge)

# Calculate the correlations
correlation_matrix <- cor(cognitive_variables, variables_of_interest)
 head(log_transformed_with_covar)

# Create the heatmap
heatmaply_cor(correlation_matrix, 
        col = colorRampPalette(c("blue", "white", "red"))(10), # Choose a color palette
        main = "Correlation between Brain-PADs and Cognitive Variables",
        ylab = "Cognitive Variables",
        xlab = "Predicted Brain Age across Models")
```
 
### Extract coefficients
```{r}

# Potentially use glms for 
 # Is age a significant predictor of cognitive performance?
age_mod<- lm(bpad_photon ~  gender +   agevisit  + gender*agevisit +trvsctrw , data = log_transformed_with_covar)  # originally   normal
extract_coefficients_pvalues(age_mod, trvsctrw)  
  
# age_mod<- lm(bpad_photon  ~  gender +   agevisit+ gender*agevisit + trvsoerw  , data = BD_only) 
# extract_coefficients_pvalues(age_mod) === REMOVED ===

#age_mod<- lm(bpad_photon ~  gender +   agevisit  + trvscerw + gender*agevisit  , data = log_transformed_with_covar) 
#extract_coefficients_pvalues(age_mod)  # === REMOVED ===

age_mod<- lm(bpad_photon ~  gender +   agevisit + cwicnrw+ gender*agevisit  , data = log_transformed_with_covar)  # originally   normal
extract_coefficients_pvalues(age_mod) 
 
age_mod<- lm(bpad_photon  ~  gender +   agevisit + cwiwrrw + gender*agevisit  , data = log_transformed_with_covar) # originally   normal
extract_coefficients_pvalues(age_mod) 

age_mod<- lm(bpad_photon ~  gender +   agevisit +  cwiirw+ gender*agevisit , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod) #sig

age_mod<- lm(bpad_photon ~  gender +   agevisit+ cwiisrw  + gender*agevisit  , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod) 
 
age_mod<- lm(bpad_photon ~  gender +   agevisit  +cwicnrw  + gender*agevisit , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod) 

age_mod<- lm(bpad_photon ~  gender +   agevisit+ trlnctrw+ gender*agevisit  , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod) 

age_mod<- lm(bpad_photon ~  gender +   agevisit + trmsctrw+ gender*agevisit , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod) 

age_mod<- lm(bpad_photon ~  gender +   agevisit + stroop1 + gender*agevisit , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod)  
 

age_mod<- lm( bpad_photon~  gender +   agevisit+ stroop2 + gender*agevisit  , data = log_transformed_with_covar) 
extract_coefficients_pvalues(age_mod)

```

### Is brain-pad predictive of dxgroup?
```{r}

mod_full<- glm( dxgroupFK~   bpad_photon+gender +   gender*agevisit   + agevisit, data = df , family = "binomial") 
summary(mod_full) 

mod_no_interaction<- glm( dxgroupFK~   bpad_BrainAgeR + gender +  agevisit , data = df, family = "binomial") 
summary(mod_no_interaction)

mod_no_interaction<- glm( dxgroupFK~   bpad_ridge + gender +  agevisit , data = df, family = "binomial") 
summary(mod_no_interaction)

anova(mod_no_interaction, mod_full, test = 'Chisq') 
```

```{r}
## predicted brain ages
df %>% dplyr::select(ridge_BrainAge, ageprediction_BrainAgeR, age_prediction) %>%  corr.test(,'spearman')

## absolute errors
df <- df %>% mutate(ae_ridge = abs(ridge_BrainAge - agevisit),
                     ae_photon = abs(age_prediction - agevisit),
                     ae_BrainAgeR = abs(ageprediction_BrainAgeR - agevisit),
                     ae_cnn =abs(cnn_BrainAge - agevisit)) %>%  
                    dplyr::select(ae_ridge, ae_BrainAgeR, ae_photon )# %>% cor()


df

df %>% dplyr::select(bpad_ridge, bpad_BrainAgeR, bpad_photon) %>% cor()

 
 
 # Calculate MAE for each model
mae_ridge <- df %>%
  summarise(mae_ridge = mean(ae_ridge))

mae_photon <- df %>%
  summarise(mae_photon = mean(ae_photon))

mae_BrainAgeR <- df %>%
  summarise(mae_BrainAgeR = mean(ae_BrainAgeR))


mae_BrainAgeR <- df %>%
  summarise(m = mean(ae_cnn))


# Combine the results into a single dataframe
result_df <- bind_rows(mae_ridge, mae_photon, mae_BrainAgeR, r2_ridge, r2_photon, r2_BrainAgeR)

result_df
```


```{r}


### absolute errors
AE_ICC <- df %>% mutate(ae_ridge = ridge_BrainAge - agevisit,
                     ae_photon = abs(age_prediction - agevisit),
                     ae_BrainAgeR = abs(ageprediction_BrainAgeR - agevisit),
                     ae_cnn =abs(cnn_BrainAge - agevisit),
                     age2 = agevisit*2) 
 
AE_ICC %>% dplyr::select(ae_ridge, ae_BrainAgeR) %>% ICC()   
AE_ICC %>% dplyr::select(ae_photon, ae_ridge) %>% ICC()  
AE_ICC %>% dplyr::select(ae_photon, ae_BrainAgeR) %>% ICC() 

df %>% dplyr::select(ridge_BrainAge, ageprediction_BrainAgeR) %>% ICC()   
df %>% dplyr::select(age_prediction, ridge_BrainAge) %>% ICC()  
df %>% dplyr::select(age_prediction, ageprediction_BrainAgeR) %>% ICC() 


df %>% dplyr::select(bpad_ridge, bpad_BrainAgeR) %>% ICC()   
df %>% dplyr::select(bpad_photon, bpad_ridge) %>% ICC()  
df %>% dplyr::select(bpad_photon, bpad_BrainAgeR) %>% ICC() 

```
 
 