summarise_if(vars(where(is.numeric)))
FSvolume_L %>% na.omit(.) %>%
summarise_if(((is.numeric)))
FSvolume_L %>% na.omit(.) %>% summarise_if(is.numeric, mean)
FSvolume_L %>% na.omit(.) %>% summarise_if(is.numeric, sd)
View(FSvolume_L)
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
columns(original_df)
head(original_df)
head(original_df) %>% dplyr::select(stdyptid,dxgroupFK, ends_with("L_V"))
head(original_df) %>% dplyr::select(stdyptid,dxgroupFK,visit, age_visit, ends_with("L_V")) %>% filter(!is.na(dxgroupFK))
head(original_df) %>% dplyr::select(stdyptid,dxgroupFK,visit, agevisit, ends_with("L_V")) %>% filter(!is.na(dxgroupFK))
head(original_df) %>% dplyr::select(stdyptid,dxgroupFK,visit, agevisit, ends_with("L_V")) %>% filter(!is.na(dxgroupFK), visit== 'Baseline')
head(original_df) %>% dplyr::select(stdyptid,dxgroupFK,visit, agevisit, ends_with("L_V")) %>% filter(!is.na(dxgroupFK) & visit== 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) & visit == 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) | visit == 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(is.na(dxgroupFK) | visit == 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(visit == 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(visit = 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(visit == 'Baseline')
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) )
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) & visit == 0 )
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) & visit == 0 ) %>% summarise_if(is.numeric, mean)
original_df %>%
dplyr::select(stdyptid, dxgroupFK, visit, agevisit, ends_with("L_V")) %>%
filter(!is.na(dxgroupFK) & visit == 0 ) %>% na.omit(.) %>% summarise_if(is.numeric, mean)
libraries <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest"
, "metaforest", "rstatix", "labelled", "data.table", 'irr')
lapply(libraries, require , character.only = TRUE)
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers',    'Hmisc', 'irr', 'psych', 'ggtext')
pckgs %in% loadedNamespaces() # check if the packages are loaded
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()
# function to test whether data is normally distributed
test_normality <- function(data) {
normality_test <- data %>%
summarise(across(everything(), ~ shapiro.test(.)$p.value))
return(normality_test)
}
## Helper functions
getPartialEtaSq<-function(m_fixed) {
petasq <- round(as.data.frame(EtaSq(m_fixed))[2],3)
return(petasq) }
# z transform data
z_transform <- function(data) {
# Calculate column-wise means and standard deviations
means <- colMeans(data)
std_devs <- apply(data, 2, sd)
# Z-transform each column
z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
return(z_transformed_data)
}
# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
summary_age_mod <- summary(m)
coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]
# Replace p-values with significance levels or rounded values
p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
ifelse(p_values < 0.01, "< 0.01",
ifelse(p_values < 0.05, "< 0.05",
round(p_values, 2))))
result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
return(result)
}
remove_outliers <- function(data, threshold = 3) {
m <- apply(data, 2, mean)  # Calculate medians for each variable
mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
# Calculate the outlier threshold as a multiple of MAD
outlier_threshold <- threshold * mad_values
# Identify outlier observations for each variable
outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
# Remove outlier observations from the dataset
cleaned_data <- data[!apply(outliers, 1, any), ]
return(cleaned_data)
}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df%>% group_by(mri_scrn, dxgroup) %>% tally()
original_df <- original_df %>% dplyr::select(
agevisit,
dxgroupFK,
#trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw
trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot,
hamtot17,
hamtot28,
visit,
stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223'))  #BD087, BD223 need to check if this was part of training
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers',    'Hmisc', 'irr', 'psych', 'ggtext')
pckgs %in% loadedNamespaces() # check if the packages are loaded
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()
# function to test whether data is normally distributed
test_normality <- function(data) {
normality_test <- data %>%
summarise(across(everything(), ~ shapiro.test(.)$p.value))
return(normality_test)
}
## Helper functions
getPartialEtaSq<-function(m_fixed) {
petasq <- round(as.data.frame(EtaSq(m_fixed))[2],3)
return(petasq) }
# z transform data
z_transform <- function(data) {
# Calculate column-wise means and standard deviations
means <- colMeans(data)
std_devs <- apply(data, 2, sd)
# Z-transform each column
z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
return(z_transformed_data)
}
# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
summary_age_mod <- summary(m)
coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]
# Replace p-values with significance levels or rounded values
p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
ifelse(p_values < 0.01, "< 0.01",
ifelse(p_values < 0.05, "< 0.05",
round(p_values, 2))))
result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
return(result)
}
remove_outliers <- function(data, threshold = 3) {
m <- apply(data, 2, mean)  # Calculate medians for each variable
mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
# Calculate the outlier threshold as a multiple of MAD
outlier_threshold <- threshold * mad_values
# Identify outlier observations for each variable
outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
# Remove outlier observations from the dataset
cleaned_data <- data[!apply(outliers, 1, any), ]
return(cleaned_data)
}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df%>% group_by(mri_scrn, dxgroup) %>% tally()
original_df <- original_df %>% dplyr::select(
agevisit,
dxgroupFK,
#trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw
trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot,
hamtot17,
hamtot28,
visit,
stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223'))  #BD087, BD223 need to check if this was part of training
#training_set <- original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223')) # only healthy individuals
original_df
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df%>% group_by(mri_scrn, dxgroup) %>% tally()
original_df <- original_df %>% dplyr::select(
agevisit,
dxgroupFK,
#trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw
trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot,
hamtot17,
hamtot28,
visit,
stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
#training_set <- original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223')) # only healthy individuals
original_df
df<-read.csv("../data_processed/df_all_brainage_2025.csv")
mod <- lm(dxgroup ~ agevisit, data = df)
summary(mod)
# this file is created from the Jupyter notebook to produce the same 44 BD and 37 HC participants for analyses
df <- df %>% dplyr::select("stdyptid", 'gender','dxgroupFK' ,"visit", 'ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit")
df  <- df %>% mutate(bpad_ridge = ridge_BrainAge - agevisit,
bpad_photon = age_prediction - agevisit,
bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
bpad_cnn = cnn_BrainAge - agevisit,
age2 = agevisit*2)
# remove NA values from each column in the data frame df while grouping the rows by the 'stdyptid' column
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid]
df$dxgroupFK <- haven::labelled(as.numeric(factor(df$dxgroupFK, levels = c("HC", "BD"))), labels = c('HC' = 0, 'BD' = 1))
# Drop 'visit' from original_df
original_df <- original_df %>%
mutate(dxgroupFK = as.numeric(as_factor(dxgroupFK)))
df <- df %>%
mutate(dxgroupFK = as.numeric(as_factor(dxgroupFK)))
# Now merge on stdyptid and dxgroupFK
merged_df <- merge(original_df, df, by = c("stdyptid", "agevisit"))
merged_df <- merged_df %>%
rename(visit = visit.y,
dxgroupFK = dxgroupFK.x)%>%
dplyr::select(-visit.x, -dxgroupFK.y) %>%
mutate(dxgroupFK = case_when(
dxgroupFK == 1 ~ 0,
dxgroupFK == 2 ~ 1,
TRUE ~ dxgroupFK  # keep original value if not 1 or 2
))
pckgs <- c("dplyr", "tidyverse", "DescTools", "ggplot2", "readxl", "lme4"
, "ModelMetrics", "merTools", "lmtest", "emmeans", "haven", "lmerTest", 'ppcor',"labelled", "data.table", 'outliers',    'Hmisc', 'irr', 'psych', 'ggtext')
pckgs %in% loadedNamespaces() # check if the packages are loaded
pacman::p_load(pckgs, character.only = TRUE)
pckgs %in% loadedNamespaces()
# function to test whether data is normally distributed
test_normality <- function(data) {
normality_test <- data %>%
summarise(across(everything(), ~ shapiro.test(.)$p.value))
return(normality_test)
}
## Helper functions
getPartialEtaSq<-function(m_fixed) {
petasq <- round(as.data.frame(EtaSq(m_fixed))[2],3)
return(petasq) }
# z transform data
z_transform <- function(data) {
# Calculate column-wise means and standard deviations
means <- colMeans(data)
std_devs <- apply(data, 2, sd)
# Z-transform each column
z_transformed_data <- scale(data, center = means, scale = std_devs) %>% as.data.frame()
return(z_transformed_data)
}
# get linear model's coefficients
extract_coefficients_pvalues <- function(m, cog_score) {
summary_age_mod <- summary(m)
coefficients <- summary_age_mod$coefficients[-1, "Estimate"] %>% round(2)
p_values <- summary_age_mod$coefficients[-1, "Pr(>|t|)"]
# Replace p-values with significance levels or rounded values
p_values_formatted <- ifelse(p_values < 0.001, "< 0.001",
ifelse(p_values < 0.01, "< 0.01",
ifelse(p_values < 0.05, "< 0.05",
round(p_values, 2))))
result <- data.frame(coef_pval = paste(coefficients, '(', p_values_formatted,')'))
rownames(result) <- c('sex', 'age', deparse(substitute(cog_score)), 'interaction' )
result <- result %>% transpose() %>% `colnames<-`(c('sex', 'age', 'cog_score', 'interaction' ))
return(result)
}
remove_outliers <- function(data, threshold = 3) {
m <- apply(data, 2, mean)  # Calculate medians for each variable
mad_values <- apply(data, 2, mad)  # Calculate median absolute deviations (MADs) for each variable
# Calculate the outlier threshold as a multiple of MAD
outlier_threshold <- threshold * mad_values
# Identify outlier observations for each variable
outliers <- apply(data, 2, function(x) abs(x - m) > outlier_threshold)
# Remove outlier observations from the dataset
cleaned_data <- data[!apply(outliers, 1, any), ]
return(cleaned_data)
}
path = file.path("../data_original/Master_BAI_080720_with_051517completers_060117imagingmaster_genotypes_brainages_ENIGMA_FS_MERGEFK_30122020.sav")
original_df = read_sav(path)
original_df%>% group_by(mri_scrn, dxgroup) %>% tally()
original_df <- original_df %>% dplyr::select(
agevisit,
dxgroupFK,
#trvsctrw, # DKEFS - Trails Visual Scanning Completion Times Raw
trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
scid_a1, # SCID Current GAF
panspos, # PANS Positive Total
pansneg, # PANS Negative Total
pansgen, # PANS General Total
ymrstot,
hamtot17,
hamtot28,
visit,
stdyptid)
original_df <- setDT(original_df)[, lapply(.SD, na.omit), by = stdyptid]
original_df <- original_df %>% filter(visit == 0) %>% mutate(visit = 'Baseline')
#training_set <- original_df %>% dplyr::filter(!stdyptid %in% df$stdyptid, !stdyptid %in% c('BD087', 'BD223')) # only healthy individuals
original_df
df<-read.csv("../data_processed/df_all_brainage_2025.csv")
mod <- lm(dxgroup ~ agevisit, data = df)
summary(mod)
# this file is created from the Jupyter notebook to produce the same 44 BD and 37 HC participants for analyses
df <- df %>% dplyr::select("stdyptid", 'gender','dxgroupFK' ,"visit", 'ridge_BrainAge',  'age_prediction', 'ageprediction_BrainAgeR' ,"cnn_BrainAge", "agevisit")
df  <- df %>% mutate(bpad_ridge = ridge_BrainAge - agevisit,
bpad_photon = age_prediction - agevisit,
bpad_BrainAgeR = ageprediction_BrainAgeR - agevisit,
bpad_cnn = cnn_BrainAge - agevisit,
age2 = agevisit*2)
# remove NA values from each column in the data frame df while grouping the rows by the 'stdyptid' column
df <- setDT(df)[, lapply(.SD, na.omit), by = stdyptid]
df$dxgroupFK <- haven::labelled(as.numeric(factor(df$dxgroupFK, levels = c("HC", "BD"))), labels = c('HC' = 0, 'BD' = 1))
# Drop 'visit' from original_df
original_df <- original_df %>%
mutate(dxgroupFK = as.numeric(as_factor(dxgroupFK)))
df <- df %>%
mutate(dxgroupFK = as.numeric(as_factor(dxgroupFK)))
# Now merge on stdyptid and dxgroupFK
merged_df <- merge(original_df, df, by = c("stdyptid", "agevisit"))
merged_df <- merged_df %>%
rename(visit = visit.y,
dxgroupFK = dxgroupFK.x)%>%
dplyr::select(-visit.x, -dxgroupFK.y) %>%
mutate(dxgroupFK = case_when(
dxgroupFK == 1 ~ 0,
dxgroupFK == 2 ~ 1,
TRUE ~ dxgroupFK  # keep original value if not 1 or 2
))
df <- merged_df
df <- df %>%
mutate(
tmtb_a = trlnctrw - trnsctrw,
stroop1 = cwiirw - (cwicnrw + cwiwrrw) / 2,
stroop2 = cwiisrw - (cwicnrw + cwiwrrw) / 2,
#gender = ifelse(gender == "Male", 1, 0),
dxgroupFK = as_factor(dxgroupFK),
gender = as_factor(gender)
# dxgroupFK = ifelse(dxgroupFK == "BD", 1, 0)
)
df
ggplot(df, aes(x = agevisit, fill = factor(dxgroupFK))) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Ages Across BD and HC Groups",
x = "Chronological Age",
y = "Density",
fill = "Group") + theme_classic()
# Select column by index position
cog_test_scores  <- df %>% dplyr::select(trvsoerw, # DKEFS - Trails Visual Scanning Omission Errors Raw (Misses)
trvscerw, # DKEFS - Trails Visual Scanning Commission Errors Raw (False Alarm)
trnsctrw, # DKEFS - Trails Number Sequencing Completion Times Raw (TMT A)
trlnctrw, # DKEFS - Trails Letter-Number Completion Times Raw (TMT B)
trmsctrw, # DKEFS - Trails Motor Speed Completion Times Raw
cwicnrw, # DKEFS - Color Word Interference - Color Naming Raw / normally dist
cwiwrrw, # DKEFS - Color Word Interference - Word Reading Raw / normally dist
cwiirw, # DKEFS - Color Word Interference - Inhibition Raw
cwiisrw, # DKEFS - Color Word Interference - Inhibition/Switching Raw
stroop1, stroop2, tmtb_a ,stdyptid, dxgroupFK, gender)%>%  dplyr::select_if(~!all(is.na(.)))  # %>% filter(stroop1> 0, stroop2 >0, tmtb_a < 1500) #manual removal of outliers based on visualzation
# outliers are addressed in code beneath using mean absolute deviance
# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)
# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value, fill = dxgroupFK)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free") +
theme_bw()
summary_stats <- cog_test_scores %>% dplyr::select(-dxgroupFK, -stdyptid, -gender) %>%
summarise(across(everything(), list(
Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE),
#  Min = ~min(.x, na.rm = TRUE),
#  Max = ~max(.x, na.rm = TRUE),
Count = ~sum(!is.na(.x))
), .names = "{.col}_{.fn}"))
summary_stats %>% melt(.) %>% mutate(value = round(value, 2))
cog_test_scores%>% dplyr::select(where(is.numeric)) %>% test_normality() > 0.05 # none of the scores are normal (when BD and HC are included)
# there 5 subjects with scores > 3 std devs above the mean
# Identify and remove outliers using the Mean Absolute Deviance (MAD) method
# Keep data points where absolute deviation from the mean is within 2 standard deviations
# This effectively removes values more than 2 standard deviations above or below the mean
outliers_removed <- cog_test_scores%>% dplyr::select(-  trvscerw,  trnsctrw) %>%
mutate_if(is.numeric, ~ ifelse(abs(. - mean(.)) / sd(.) <= 3, ., NA)) %>%
dplyr::select_if(~!all(is.na(.))) %>%
mutate_if(is.numeric, ~ round(., 3))
outliers_removed
# Reshape the dataset into long format using melt from reshape2 package
# Create histograms for each variable, showing the distribution of values after removing outliers
# Facet the histograms by variable to compare distributions
outliers_removed %>%
reshape2::melt(.) %>%
ggplot(aes(x = value, fill = dxgroupFK)) +
geom_histogram() +
facet_grid(~ variable, scales = "free") +
theme_bw()
summary_stats <- outliers_removed %>% dplyr::select(-dxgroupFK, -stdyptid, -gender) %>%
summarise(across(everything(), list(
Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE)
), .names = "{.col}_{.fn}"))
summary_stats %>% melt(.) %>% mutate(value = round(value, 2))
outliers_removed %>% select_if(is.numeric) %>% test_normality >0.05 # cwiwrrw, cwicnrw, trmsctrw, trvsctrw
constant <- abs(min(outliers_removed$tmtb_a, na.rm = TRUE)) + 1
outliers_removed$tmtb_a <- outliers_removed$tmtb_a + constant
outliers_removed <- outliers_removed %>%
select_if(function(x) !all(is.na(x)))
# Perform Principal Component Analysis (PCA) on the 'outliers_removed' data frame
pca_result <-  outliers_removed %>%# filter_all(all_vars(!is.na(.))) %>%
# Consider observations as outliers if they are more than 2 standard deviations from the mean
select_if(is.numeric) %>%  log10(.) %>%
# Apply a logarithmic transformation to numeric columns (except specific ones)
# mutate_at(vars(-cwiwrrw, -cwicnrw, -trmsctrw, -trvsctrw), ~log10(.)) %>%
# Standardize (scale) all numeric columns
mutate_if(is.numeric, scale) %>%
# Negate the values of specific columns because these represent worse cognitive performance if they are lower
mutate(
cwicnrw = -cwicnrw,
cwiwrrw = -cwiwrrw,
cwiirw = -cwiirw,
cwiisrw = -cwiisrw
)  %>%
# Perform PCA with one factor (component)
principal(nfactors = 1)
# create a df where outliers have been removed but all other variables (e.g., age) are included
outliers_removed_df <- df %>% filter(stdyptid %in% outliers_removed$stdyptid)
# column bind the df with outliers removed and the pca scores
outliers_removed_df_pc <- cbind(as.data.frame(outliers_removed_df), pca_result$scores*-1)
outliers_removed_df_pc #%>% group_by(dxgroupFK) %>% tally() #BD=38, HC=33
# Extract eigenvalues from the PCA result
eigenvalues <- pca_result$values
# Calculate the proportion of variance explained by each principal component
variance_explained <- eigenvalues / sum(eigenvalues)
# Create a scree plot
plot(1:length(variance_explained), variance_explained, type = "b",
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
main = "Scree Plot")
variance_explained
# Filter out rows with missing bpad_ridge
filtered_df <- outliers_removed_df_pc %>%
filter(complete.cases(bpad_ridge))
# Refit model using the filtered data
resid_mod <- lm(bpad_ridge ~ gender * agevisit, data = filtered_df)
summary(resid_mod)
# Get residuals from the model
filtered_df$resid_bpad_ridge <- resid(resid_mod)
# Regress PC1 on residualized bpad_photon
pca_cog_mod <- lm(PC1 ~ resid_bpad_ridge, data = filtered_df)
summary(pca_cog_mod)
# Get partial eta squared
getPartialEtaSq(pca_cog_mod)
resid_mod <- lm(bpad_photon ~   gender*agevisit, data = outliers_removed_df_pc)
resid_bpad_photon <- resid(resid_mod)
grubbs.test(resid_bpad_BrainAgeR)
# Refit model using the filtered data
resid_mod <- lm(dxgroupFK ~  agevisit, data = filtered_df)
# Refit model using the filtered data
m <- lm(dxgroupFK ~  agevisit, data = filtered_df)
summary(m)
m <- lm(dxgroupFK ~  agevisit, data = filtered_df)
summary(m)
# Reshape the dataframe from wide to long format
df_long <- reshape2::melt(cog_test_scores)
# Plot the distribution of cog scores using facet_wrap
ggplot(df_long, aes(x = value, fill=dxgroupFK)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free") +
theme_bw()
outliers_removed
outliers_removed_df_pc
